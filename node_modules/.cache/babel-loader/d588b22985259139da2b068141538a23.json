{"remainingRequest":"/tmp/vue-dnsstamp/node_modules/babel-loader/lib/index.js!/tmp/vue-dnsstamp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/tmp/vue-dnsstamp/node_modules/vue-loader/lib/index.js??vue-loader-options!/tmp/vue-dnsstamp/src/components/DNSStamp.vue?vue&type=script&lang=js&","dependencies":[{"path":"/tmp/vue-dnsstamp/src/components/DNSStamp.vue","mtime":1554485689768},{"path":"/tmp/vue-dnsstamp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _toConsumableArray from \"/tmp/vue-dnsstamp/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar URLSafeBase64 = require(\"urlsafe-base64\");\n\nexport default {\n  name: \"DNSStamp\",\n  data: function data() {\n    return {\n      proto: \"DNSCrypt\",\n      dnssec: true,\n      nolog: true,\n      nofilter: true,\n      addr: \"\",\n      pk: \"\",\n      providerName: \"2.dnscrypt-cert.\",\n      hostName: \"\",\n      hash: \"\",\n      path: \"/dns-query\"\n    };\n  },\n  methods: {\n    stampUpdated: function stampUpdated(e) {\n      var _this = this;\n\n      var stamp = e.target.value;\n\n      if (stamp.substr(0, 7) !== \"sdns://\") {\n        return;\n      }\n\n      var bin = URLSafeBase64.decode(stamp.substr(7));\n\n      if (bin[0] === 0x01) {\n        this.proto = \"DNSCrypt\";\n      } else if (bin[0] === 0x02) {\n        this.proto = \"DoH\";\n      } else {\n        return;\n      }\n\n      var props = bin[1];\n      this.dnssec = !!(props >> 0 & 1);\n      this.nolog = !!(props >> 1 & 1);\n      this.nofilter = !!(props >> 2 & 1);\n      var i = 9;\n      var addrLen = bin[i++];\n      this.addr = bin.slice(i, i + addrLen).toString(\"utf-8\");\n      i += addrLen;\n\n      var dnscryptStamp = function dnscryptStamp() {\n        var pkLen = bin[i++];\n        _this.pk = bin.slice(i, i + pkLen).toString(\"hex\");\n        i += pkLen;\n        var providerNameLen = bin[i++];\n        _this.providerName = bin.slice(i, i + providerNameLen).toString(\"utf-8\");\n      };\n\n      var dohStamp = function dohStamp() {\n        var hashLen = bin[i++];\n        _this.hash = bin.slice(i, i + hashLen).toString(\"hex\");\n        i += hashLen;\n        var hostNameLen = bin[i++];\n        _this.hostName = bin.slice(i, i + hostNameLen).toString(\"utf-8\");\n        i += hostNameLen;\n        var pathLen = bin[i++];\n        _this.path = bin.slice(i, i + pathLen).toString(\"utf-8\");\n      };\n\n      if (this.proto === \"DNSCrypt\") {\n        dnscryptStamp();\n      } else if (this.proto === \"DoH\") {\n        dohStamp();\n      }\n    }\n  },\n  computed: {\n    stamp: function stamp() {\n      var _this2 = this;\n\n      var props = this.dnssec << 0 | this.nolog << 1 | this.nofilter << 2;\n      var addr = this.addr.split(\"\").map(function (c) {\n        return c.charCodeAt();\n      });\n\n      var dnscryptStamp = function dnscryptStamp() {\n        var v = [0x01, props, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n        v.push.apply(v, [addr.length].concat(_toConsumableArray(addr)));\n        var pk = Buffer.from(_this2.pk.replace(/[: \\t]/g, \"\"), \"hex\");\n        v.push.apply(v, [pk.length].concat(_toConsumableArray(pk)));\n\n        var providerName = _this2.providerName.split(\"\").map(function (c) {\n          return c.charCodeAt();\n        });\n\n        v.push.apply(v, [providerName.length].concat(_toConsumableArray(providerName)));\n        return \"sdns://\".concat(URLSafeBase64.encode(Buffer(v)));\n      };\n\n      var dohStamp = function dohStamp() {\n        var v = [0x02, props, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n        v.push.apply(v, [addr.length].concat(_toConsumableArray(addr)));\n        var hash = Buffer.from(_this2.hash.replace(/[: \\t]/g, \"\"), \"hex\");\n        v.push.apply(v, [hash.length].concat(_toConsumableArray(hash)));\n\n        var hostName = _this2.hostName.split(\"\").map(function (c) {\n          return c.charCodeAt();\n        });\n\n        v.push.apply(v, [hostName.length].concat(_toConsumableArray(hostName)));\n\n        var path = _this2.path.split(\"\").map(function (c) {\n          return c.charCodeAt();\n        });\n\n        v.push.apply(v, [path.length].concat(_toConsumableArray(path)));\n        return \"sdns://\".concat(URLSafeBase64.encode(Buffer(v)));\n      };\n\n      if (this.proto === \"DNSCrypt\") {\n        return dnscryptStamp();\n      } else {\n        return dohStamp();\n      }\n    }\n  }\n};",{"version":3,"sources":["DNSStamp.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <form>\n      <fieldset>\n        <label>Protocol:\n          <select v-model=\"proto\">\n            <option value=\"DNSCrypt\">DNSCrypt</option>\n            <option value=\"DoH\">DNS-over-HTTP/2</option>\n          </select>\n        </label>\n        <label>DNSSEC\n          <input type=\"checkbox\"  v-model=\"dnssec\"/>\n        </label>\n        <label>No logs\n          <input type=\"checkbox\" v-model=\"nolog\"/>\n        </label>\n        <label>No filter\n          <input type=\"checkbox\" v-model=\"nofilter\"/>\n        </label>\n      </fieldset>\n      <fieldset class=\"protoprops\">\n        <label>IP address:\n          <input v-model=\"addr\"/>\n        </label>\n        <span v-if=\"proto==='DNSCrypt'\">\n          <label>Provider public key:\n            <input  v-model=\"pk\"/>\n          </label>\n          <label>Provider name:\n            <input v-model=\"providerName\"/>\n          </label>\n        </span>\n        <span v-if=\"proto==='DoH'\">\n          <label>Host name (vhost+SNI) and optional port number:\n            <input v-model=\"hostName\"/>\n          </label>\n          <label>Certificate hash (SHA256):\n            <input v-model=\"hash\"/>\n          </label>\n          <label>Path:\n            <input v-model=\"path\"/>\n          </label>\n        </span>\n      </fieldset>\n      <fieldset class=\"protoprops\">\n        <label>Stamp:\n          <input :value=\"stamp\" @input=\"stampUpdated\"/>\n        </label>\n      </fieldset>\n    </form>\n</template>\n\n<script>\nconst URLSafeBase64 = require(\"urlsafe-base64\");\n\nexport default {\n  name: \"DNSStamp\",\n  data() {\n    return {\n      proto: \"DNSCrypt\",\n      dnssec: true,\n      nolog: true,\n      nofilter: true,\n      addr: \"\",\n      pk: \"\",\n      providerName: \"2.dnscrypt-cert.\",\n      hostName: \"\",\n      hash: \"\",\n      path: \"/dns-query\"\n    };\n  },\n  methods: {\n    stampUpdated(e) {\n      let stamp = e.target.value;\n      if (stamp.substr(0, 7) !== \"sdns://\") {\n        return;\n      }\n      let bin = URLSafeBase64.decode(stamp.substr(7));\n      if (bin[0] === 0x01) {\n        this.proto = \"DNSCrypt\";\n      } else if (bin[0] === 0x02) {\n        this.proto = \"DoH\";\n      } else {\n        return;\n      }\n      let props = bin[1];\n      this.dnssec = !!((props >> 0) & 1);\n      this.nolog = !!((props >> 1) & 1);\n      this.nofilter = !!((props >> 2) & 1);\n      let i = 9;\n      let addrLen = bin[i++];\n      this.addr = bin.slice(i, i + addrLen).toString(\"utf-8\");\n      i += addrLen;\n\n      const dnscryptStamp = () => {\n        let pkLen = bin[i++];\n        this.pk = bin.slice(i, i + pkLen).toString(\"hex\");\n        i += pkLen;\n        let providerNameLen = bin[i++];\n        this.providerName = bin.slice(i, i + providerNameLen).toString(\"utf-8\");\n      };\n\n      const dohStamp = () => {\n        let hashLen = bin[i++];\n        this.hash = bin.slice(i, i + hashLen).toString(\"hex\");\n        i += hashLen;\n        let hostNameLen = bin[i++];\n        this.hostName = bin.slice(i, i + hostNameLen).toString(\"utf-8\");\n        i += hostNameLen;\n        let pathLen = bin[i++];\n        this.path = bin.slice(i, i + pathLen).toString(\"utf-8\");\n      };\n\n      if (this.proto === \"DNSCrypt\") {\n        dnscryptStamp();\n      } else if (this.proto === \"DoH\") {\n        dohStamp();\n      }\n    }\n  },\n  computed: {\n    stamp: function() {\n      let props = (this.dnssec << 0) | (this.nolog << 1) | (this.nofilter << 2);\n      let addr = this.addr.split(\"\").map(c => c.charCodeAt());\n\n      const dnscryptStamp = () => {\n        let v = [0x01, props, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n        v.push(addr.length, ...addr);\n        let pk = Buffer.from(this.pk.replace(/[: \\t]/g, \"\"), \"hex\");\n        v.push(pk.length, ...pk);\n        let providerName = this.providerName.split(\"\").map(c => c.charCodeAt());\n        v.push(providerName.length, ...providerName);\n        return `sdns://${URLSafeBase64.encode(Buffer(v))}`;\n      };\n\n      const dohStamp = () => {\n        let v = [0x02, props, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n        v.push(addr.length, ...addr);\n        let hash = Buffer.from(this.hash.replace(/[: \\t]/g, \"\"), \"hex\");\n        v.push(hash.length, ...hash);\n        let hostName = this.hostName.split(\"\").map(c => c.charCodeAt());\n        v.push(hostName.length, ...hostName);\n        let path = this.path.split(\"\").map(c => c.charCodeAt());\n        v.push(path.length, ...path);\n        return `sdns://${URLSafeBase64.encode(Buffer(v))}`;\n      };\n\n      if (this.proto === \"DNSCrypt\") {\n        return dnscryptStamp();\n      } else {\n        return dohStamp();\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.protoprops label {\n  display: block;\n}\n.protoprops input {\n  display: block;\n  width: 80%;\n  margin: auto;\n}\n</style>\n"],"sourceRoot":"src/components"}]}