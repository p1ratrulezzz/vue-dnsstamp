{"remainingRequest":"/tmp/vue-dnsstamp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/tmp/vue-dnsstamp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/tmp/vue-dnsstamp/node_modules/vue-loader/lib/index.js??vue-loader-options!/tmp/vue-dnsstamp/src/components/DNSStamp.vue?vue&type=template&id=ab0bb16c&scoped=true&","dependencies":[{"path":"/tmp/vue-dnsstamp/src/components/DNSStamp.vue","mtime":1554485689768},{"path":"/tmp/vue-dnsstamp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"form\", [\n    _c(\"fieldset\", [\n      _c(\"label\", [\n        _vm._v(\"Protocol:\\n      \"),\n        _c(\n          \"select\",\n          {\n            directives: [\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.proto,\n                expression: \"proto\"\n              }\n            ],\n            on: {\n              change: function($event) {\n                var $$selectedVal = Array.prototype.filter\n                  .call($event.target.options, function(o) {\n                    return o.selected\n                  })\n                  .map(function(o) {\n                    var val = \"_value\" in o ? o._value : o.value\n                    return val\n                  })\n                _vm.proto = $event.target.multiple\n                  ? $$selectedVal\n                  : $$selectedVal[0]\n              }\n            }\n          },\n          [\n            _c(\"option\", { attrs: { value: \"DNSCrypt\" } }, [\n              _vm._v(\"DNSCrypt\")\n            ]),\n            _c(\"option\", { attrs: { value: \"DoH\" } }, [\n              _vm._v(\"DNS-over-HTTP/2\")\n            ])\n          ]\n        )\n      ]),\n      _c(\"label\", [\n        _vm._v(\"DNSSEC\\n      \"),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.dnssec,\n              expression: \"dnssec\"\n            }\n          ],\n          attrs: { type: \"checkbox\" },\n          domProps: {\n            checked: Array.isArray(_vm.dnssec)\n              ? _vm._i(_vm.dnssec, null) > -1\n              : _vm.dnssec\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.dnssec,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 && (_vm.dnssec = $$a.concat([$$v]))\n                } else {\n                  $$i > -1 &&\n                    (_vm.dnssec = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))\n                }\n              } else {\n                _vm.dnssec = $$c\n              }\n            }\n          }\n        })\n      ]),\n      _c(\"label\", [\n        _vm._v(\"No logs\\n      \"),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.nolog,\n              expression: \"nolog\"\n            }\n          ],\n          attrs: { type: \"checkbox\" },\n          domProps: {\n            checked: Array.isArray(_vm.nolog)\n              ? _vm._i(_vm.nolog, null) > -1\n              : _vm.nolog\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.nolog,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 && (_vm.nolog = $$a.concat([$$v]))\n                } else {\n                  $$i > -1 &&\n                    (_vm.nolog = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))\n                }\n              } else {\n                _vm.nolog = $$c\n              }\n            }\n          }\n        })\n      ]),\n      _c(\"label\", [\n        _vm._v(\"No filter\\n      \"),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.nofilter,\n              expression: \"nofilter\"\n            }\n          ],\n          attrs: { type: \"checkbox\" },\n          domProps: {\n            checked: Array.isArray(_vm.nofilter)\n              ? _vm._i(_vm.nofilter, null) > -1\n              : _vm.nofilter\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.nofilter,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 && (_vm.nofilter = $$a.concat([$$v]))\n                } else {\n                  $$i > -1 &&\n                    (_vm.nofilter = $$a\n                      .slice(0, $$i)\n                      .concat($$a.slice($$i + 1)))\n                }\n              } else {\n                _vm.nofilter = $$c\n              }\n            }\n          }\n        })\n      ])\n    ]),\n    _c(\"fieldset\", { staticClass: \"protoprops\" }, [\n      _c(\"label\", [\n        _vm._v(\"IP address:\\n      \"),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.addr,\n              expression: \"addr\"\n            }\n          ],\n          domProps: { value: _vm.addr },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.addr = $event.target.value\n            }\n          }\n        })\n      ]),\n      _vm.proto === \"DNSCrypt\"\n        ? _c(\"span\", [\n            _c(\"label\", [\n              _vm._v(\"Provider public key:\\n        \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.pk,\n                    expression: \"pk\"\n                  }\n                ],\n                domProps: { value: _vm.pk },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.pk = $event.target.value\n                  }\n                }\n              })\n            ]),\n            _c(\"label\", [\n              _vm._v(\"Provider name:\\n        \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.providerName,\n                    expression: \"providerName\"\n                  }\n                ],\n                domProps: { value: _vm.providerName },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.providerName = $event.target.value\n                  }\n                }\n              })\n            ])\n          ])\n        : _vm._e(),\n      _vm.proto === \"DoH\"\n        ? _c(\"span\", [\n            _c(\"label\", [\n              _vm._v(\n                \"Host name (vhost+SNI) and optional port number:\\n        \"\n              ),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.hostName,\n                    expression: \"hostName\"\n                  }\n                ],\n                domProps: { value: _vm.hostName },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.hostName = $event.target.value\n                  }\n                }\n              })\n            ]),\n            _c(\"label\", [\n              _vm._v(\"Certificate hash (SHA256):\\n        \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.hash,\n                    expression: \"hash\"\n                  }\n                ],\n                domProps: { value: _vm.hash },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.hash = $event.target.value\n                  }\n                }\n              })\n            ]),\n            _c(\"label\", [\n              _vm._v(\"Path:\\n        \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.path,\n                    expression: \"path\"\n                  }\n                ],\n                domProps: { value: _vm.path },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.path = $event.target.value\n                  }\n                }\n              })\n            ])\n          ])\n        : _vm._e()\n    ]),\n    _c(\"fieldset\", { staticClass: \"protoprops\" }, [\n      _c(\"label\", [\n        _vm._v(\"Stamp:\\n      \"),\n        _c(\"input\", {\n          domProps: { value: _vm.stamp },\n          on: { input: _vm.stampUpdated }\n        })\n      ])\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}