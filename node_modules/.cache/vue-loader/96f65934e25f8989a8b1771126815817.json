{"remainingRequest":"/tmp/vue-dnsstamp/node_modules/vue-loader/lib/index.js??vue-loader-options!/tmp/vue-dnsstamp/src/components/DNSStamp.vue?vue&type=style&index=0&id=ab0bb16c&scoped=true&lang=css&","dependencies":[{"path":"/tmp/vue-dnsstamp/src/components/DNSStamp.vue","mtime":1554485689768},{"path":"/tmp/vue-dnsstamp/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/tmp/vue-dnsstamp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.protoprops label {\n  display: block;\n}\n.protoprops input {\n  display: block;\n  width: 80%;\n  margin: auto;\n}\n",{"version":3,"sources":["DNSStamp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DNSStamp.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <form>\n      <fieldset>\n        <label>Protocol:\n          <select v-model=\"proto\">\n            <option value=\"DNSCrypt\">DNSCrypt</option>\n            <option value=\"DoH\">DNS-over-HTTP/2</option>\n          </select>\n        </label>\n        <label>DNSSEC\n          <input type=\"checkbox\"  v-model=\"dnssec\"/>\n        </label>\n        <label>No logs\n          <input type=\"checkbox\" v-model=\"nolog\"/>\n        </label>\n        <label>No filter\n          <input type=\"checkbox\" v-model=\"nofilter\"/>\n        </label>\n      </fieldset>\n      <fieldset class=\"protoprops\">\n        <label>IP address:\n          <input v-model=\"addr\"/>\n        </label>\n        <span v-if=\"proto==='DNSCrypt'\">\n          <label>Provider public key:\n            <input  v-model=\"pk\"/>\n          </label>\n          <label>Provider name:\n            <input v-model=\"providerName\"/>\n          </label>\n        </span>\n        <span v-if=\"proto==='DoH'\">\n          <label>Host name (vhost+SNI) and optional port number:\n            <input v-model=\"hostName\"/>\n          </label>\n          <label>Certificate hash (SHA256):\n            <input v-model=\"hash\"/>\n          </label>\n          <label>Path:\n            <input v-model=\"path\"/>\n          </label>\n        </span>\n      </fieldset>\n      <fieldset class=\"protoprops\">\n        <label>Stamp:\n          <input :value=\"stamp\" @input=\"stampUpdated\"/>\n        </label>\n      </fieldset>\n    </form>\n</template>\n\n<script>\nconst URLSafeBase64 = require(\"urlsafe-base64\");\n\nexport default {\n  name: \"DNSStamp\",\n  data() {\n    return {\n      proto: \"DNSCrypt\",\n      dnssec: true,\n      nolog: true,\n      nofilter: true,\n      addr: \"\",\n      pk: \"\",\n      providerName: \"2.dnscrypt-cert.\",\n      hostName: \"\",\n      hash: \"\",\n      path: \"/dns-query\"\n    };\n  },\n  methods: {\n    stampUpdated(e) {\n      let stamp = e.target.value;\n      if (stamp.substr(0, 7) !== \"sdns://\") {\n        return;\n      }\n      let bin = URLSafeBase64.decode(stamp.substr(7));\n      if (bin[0] === 0x01) {\n        this.proto = \"DNSCrypt\";\n      } else if (bin[0] === 0x02) {\n        this.proto = \"DoH\";\n      } else {\n        return;\n      }\n      let props = bin[1];\n      this.dnssec = !!((props >> 0) & 1);\n      this.nolog = !!((props >> 1) & 1);\n      this.nofilter = !!((props >> 2) & 1);\n      let i = 9;\n      let addrLen = bin[i++];\n      this.addr = bin.slice(i, i + addrLen).toString(\"utf-8\");\n      i += addrLen;\n\n      const dnscryptStamp = () => {\n        let pkLen = bin[i++];\n        this.pk = bin.slice(i, i + pkLen).toString(\"hex\");\n        i += pkLen;\n        let providerNameLen = bin[i++];\n        this.providerName = bin.slice(i, i + providerNameLen).toString(\"utf-8\");\n      };\n\n      const dohStamp = () => {\n        let hashLen = bin[i++];\n        this.hash = bin.slice(i, i + hashLen).toString(\"hex\");\n        i += hashLen;\n        let hostNameLen = bin[i++];\n        this.hostName = bin.slice(i, i + hostNameLen).toString(\"utf-8\");\n        i += hostNameLen;\n        let pathLen = bin[i++];\n        this.path = bin.slice(i, i + pathLen).toString(\"utf-8\");\n      };\n\n      if (this.proto === \"DNSCrypt\") {\n        dnscryptStamp();\n      } else if (this.proto === \"DoH\") {\n        dohStamp();\n      }\n    }\n  },\n  computed: {\n    stamp: function() {\n      let props = (this.dnssec << 0) | (this.nolog << 1) | (this.nofilter << 2);\n      let addr = this.addr.split(\"\").map(c => c.charCodeAt());\n\n      const dnscryptStamp = () => {\n        let v = [0x01, props, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n        v.push(addr.length, ...addr);\n        let pk = Buffer.from(this.pk.replace(/[: \\t]/g, \"\"), \"hex\");\n        v.push(pk.length, ...pk);\n        let providerName = this.providerName.split(\"\").map(c => c.charCodeAt());\n        v.push(providerName.length, ...providerName);\n        return `sdns://${URLSafeBase64.encode(Buffer(v))}`;\n      };\n\n      const dohStamp = () => {\n        let v = [0x02, props, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n        v.push(addr.length, ...addr);\n        let hash = Buffer.from(this.hash.replace(/[: \\t]/g, \"\"), \"hex\");\n        v.push(hash.length, ...hash);\n        let hostName = this.hostName.split(\"\").map(c => c.charCodeAt());\n        v.push(hostName.length, ...hostName);\n        let path = this.path.split(\"\").map(c => c.charCodeAt());\n        v.push(path.length, ...path);\n        return `sdns://${URLSafeBase64.encode(Buffer(v))}`;\n      };\n\n      if (this.proto === \"DNSCrypt\") {\n        return dnscryptStamp();\n      } else {\n        return dohStamp();\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.protoprops label {\n  display: block;\n}\n.protoprops input {\n  display: block;\n  width: 80%;\n  margin: auto;\n}\n</style>\n"]}]}